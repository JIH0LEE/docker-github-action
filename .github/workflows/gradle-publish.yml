# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: API Server CI/CD

on:
  push:
    branches: ["master"]
env:
  NEW_APP_VERSION: 0.1.2
  CONTAINER_NAME: api-server

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew build
      
    - name: docker build and push
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker build -t ${{ secrets.DOCKER_REPO }}:$APP_VERSION .
        docker push ${{ secrets.DOCKER_REPO }}:$APP_VERSION

    - name: deploy
      uses: appleboy/ssh-action@v0.1.6
      with:
        host: ${{ secrets.WAS_HOST }}
        username: ${{ secrets.WAS_USERNAME }}
        password: ${{ secrets.WAS_PASSWORD }}
        port: ${{ secrets.WAS_SSH_PORT }}
        script: |
          sudo docker stop $CONTAINER_NAME
          sudo docker rm $CONTAINER_NAME
          sudo docker rmi image $(docker images -q --filter "reference=${{ secrets.DOCKER_REPO }}")
          sudo docker pull ${{ secrets.DOCKER_REPO }}:$APP_VERSION
          sudo docker run -d -p 8080:8080 --name $CONTAINER_NAME {{ secrets.DOCKER_REPO }}:$APP_VERSION